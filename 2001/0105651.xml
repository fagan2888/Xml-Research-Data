<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>Logics and Type Systems for Computational Complexity</AwardTitle>
    <AwardEffectiveDate>09/01/2001</AwardEffectiveDate>
    <AwardExpirationDate>08/31/2006</AwardExpirationDate>
    <AwardAmount>209999</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010100</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Richard Beigel</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>The certitude that software execution terminates in principle&lt;br/&gt;is of little use without a grasp of the resources required,&lt;br/&gt;in particular computation time and space as functions of input size.&lt;br/&gt;Research over the last decade has demonstrated the potential of implicit&lt;br/&gt;static analysis of computational complexity, that is, programming and&lt;br/&gt;verification paradigms that automatically guarantee program execution&lt;br/&gt;within feasible resources, without an explicit analysis of&lt;br/&gt;algorithmic complexity in terms of machine models.&lt;br/&gt;&lt;br/&gt;This project further explores the conceptual&lt;br/&gt;underpinnings of machine-independent complexity, in particular&lt;br/&gt;abstraction mechanisms in functional programs and verification systems.&lt;br/&gt;It studies the implementation of these principles within major&lt;br/&gt;programming paradigms and styles, notably declarative and object&lt;br/&gt;oriented programming.&lt;br/&gt;Finally, it initiates applications of implicit complexity&lt;br/&gt;in Feasible Mathematics, in the guise of a library&lt;br/&gt;of formal proofs which establish the feasible computational contents&lt;br/&gt;of mathematical theorems without referring explicitly to computational&lt;br/&gt;complexity.</AbstractNarration>
    <MinAmdLetterDate>08/27/2001</MinAmdLetterDate>
    <MaxAmdLetterDate>03/07/2005</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0105651</AwardID>
    <Investigator>
      <FirstName>Daniel</FirstName>
      <LastName>Leivant</LastName>
      <EmailAddress>leivant@cs.indiana.edu</EmailAddress>
      <StartDate>08/27/2001</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Indiana University</Name>
      <CityName>Bloomington</CityName>
      <ZipCode>474013654</ZipCode>
      <PhoneNumber>8128550516</PhoneNumber>
      <StreetAddress>509 E 3RD ST</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Indiana</StateName>
      <StateCode>IN</StateCode>
    </Institution>
    <ProgramElement>
      <Code>2860</Code>
      <Text>THEORY OF COMPUTING</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>0000</Code>
      <Text>UNASSIGNED</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9216</Code>
      <Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>OTHR</Code>
      <Text>OTHER RESEARCH OR EDUCATION</Text>
    </ProgramReference>
  </Award>
</rootTag>
