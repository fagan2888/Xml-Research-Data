<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>ITR/SY: Modular Interface Violation Checking Using Formally-Specified Contracts</AwardTitle>
    <AwardEffectiveDate>08/15/2001</AwardEffectiveDate>
    <AwardExpirationDate>07/31/2007</AwardExpirationDate>
    <AwardAmount>412099</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05050000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division Of Computer and Network Systems</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>D. Helen Gill</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>Abstract&lt;br/&gt;Proposal #0113181&lt;br/&gt;Sitaraman&lt;br/&gt;Clemson University&lt;br/&gt;&lt;br/&gt;A fundamental goal of software engineering is to enable predictable and modular construction of software systems by assembling components. Any component-based approach works on the basic premise that participating components respect each other's contracts. If this premise is violated, the consequences can be both dangerous and expensive, because the problems may not surface until integration time. Even worse, a system may behave properly on test cases, though internal interface contracts are violated. Undetected failures from internal violations may be revealed ultimately only as accidents to component-based and embedded systems after deployment.&lt;br/&gt;&lt;br/&gt;This project offers a modular approach for detecting and isolating internal contractual violations. The approach allows checking at suitable levels of abstraction using formal specifications. It permits checking to be turned "on" or "off" selectively to facilitate effective regression testing, and it addresses violations of performance contracts in addition to functionality for parameterized and object-oriented components. To minimize errors in the violation checking process, the project will use and experimentally evaluate alternative combinations of automation, formal verification, model checking, and testing techniques.</AbstractNarration>
    <MinAmdLetterDate>08/02/2001</MinAmdLetterDate>
    <MaxAmdLetterDate>07/18/2006</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0113181</AwardID>
    <Investigator>
      <FirstName>Gary</FirstName>
      <LastName>Leavens</LastName>
      <EmailAddress>leavens@eecs.ucf.edu</EmailAddress>
      <StartDate>08/02/2001</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Murali</FirstName>
      <LastName>Sitaraman</LastName>
      <EmailAddress>murali@cs.clemson.edu</EmailAddress>
      <StartDate>08/02/2001</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Investigator>
      <FirstName>Stephen</FirstName>
      <LastName>Edwards</LastName>
      <EmailAddress>edwards@cs.vt.edu</EmailAddress>
      <StartDate>08/02/2001</StartDate>
      <EndDate/>
      <RoleCode>Co-Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Clemson University</Name>
      <CityName>CLEMSON</CityName>
      <ZipCode>296340001</ZipCode>
      <PhoneNumber>8646562424</PhoneNumber>
      <StreetAddress>230 Kappa Street</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>South Carolina</StateName>
      <StateCode>SC</StateCode>
    </Institution>
    <ProgramElement>
      <Code>1640</Code>
      <Text>INFORMATION TECHNOLOGY RESEARC</Text>
    </ProgramElement>
    <ProgramElement>
      <Code>1686</Code>
      <Text>ITR SMALL GRANTS</Text>
    </ProgramElement>
    <ProgramReference>
      <Code>1667</Code>
      <Text>HIGH CONFIDENCE SYSTEMS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>1686</Code>
      <Text>ITR SMALL GRANTS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9216</Code>
      <Text>ADVANCED SOFTWARE TECH &amp; ALGOR</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9218</Code>
      <Text>BASIC RESEARCH &amp; HUMAN RESORCS</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>9251</Code>
      <Text>RES EXPER FOR UNDERGRAD-SUPPLT</Text>
    </ProgramReference>
    <ProgramReference>
      <Code>HPCC</Code>
      <Text>HIGH PERFORMANCE COMPUTING &amp; COMM</Text>
    </ProgramReference>
  </Award>
</rootTag>
