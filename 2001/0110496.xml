<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>ITR/SY: Non-Deterministic Computations for Functional Logic Programs</AwardTitle>
    <AwardEffectiveDate>07/15/2001</AwardEffectiveDate>
    <AwardExpirationDate>06/30/2005</AwardExpirationDate>
    <AwardAmount>186000</AwardAmount>
    <AwardInstrument>
      <Value>Standard Grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>0110496&lt;br/&gt;Sergio Antoy&lt;br/&gt;Portland State University&lt;br/&gt;&lt;br/&gt;ITR/SY: Non-Deterministic Computations for Functional Logic Programs&lt;br/&gt;&lt;br/&gt;Abstract:&lt;br/&gt;&lt;br/&gt; Narrowing allows the seamless integration of functional and logic&lt;br/&gt; computations. A narrowing strategy selects from an expression the&lt;br/&gt; subexpression(s) to evaluate and instantiates variables if&lt;br/&gt; necessary. Different selection strategies extend from functional&lt;br/&gt; to functional logic programming computational behaviors such as&lt;br/&gt; call-by-value and call-by-need. Sound, complete, and optimal (to&lt;br/&gt; varying degrees) strategies are known for both Haskell-like&lt;br/&gt; programs and programs that allow some forms of parallelism.&lt;br/&gt;&lt;br/&gt; Unfortunately, these classes of programs do not support&lt;br/&gt; non-deterministic computations. The lack of non-determinism is a&lt;br/&gt; severe limitation in functional logic languages. It prevents the&lt;br/&gt; use of familiar logic programming idioms and, in some cases, leads&lt;br/&gt; to programs that violate the inherent laziness of a problem. The&lt;br/&gt; research proposes a new computational framework, a class of&lt;br/&gt; programs, and a strategy for narrowing computations in this class&lt;br/&gt; that supports non-determinism without loss of soundness,&lt;br/&gt; completeness or efficiency. Within this framework, programs become&lt;br/&gt; textually shorter, conceptually simpler, more modular, easier to&lt;br/&gt; understand and maintain, and arguably more efficient.&lt;br/&gt;&lt;br/&gt; The proposed strategy has the potential to encompass strategies&lt;br/&gt; for other interesting classes of functional logic programs and it&lt;br/&gt; is expected to unify various concurrent disjoint efforts aiming at&lt;br/&gt; integrating different narrowing strategies within a single&lt;br/&gt; language.</AbstractNarration>
    <MinAmdLetterDate>07/23/2001</MinAmdLetterDate>
    <MaxAmdLetterDate>07/23/2001</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0110496</AwardID>
    <Investigator>
      <FirstName>Sergio</FirstName>
      <LastName>Antoy</LastName>
      <EmailAddress>antoy@cs.pdx.edu</EmailAddress>
      <StartDate>07/23/2001</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Portland State University</Name>
      <CityName>Portland</CityName>
      <ZipCode>972070751</ZipCode>
      <PhoneNumber>5037259900</PhoneNumber>
      <StreetAddress>1600 SW 4th Ave</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Oregon</StateName>
      <StateCode>OR</StateCode>
    </Institution>
  </Award>
</rootTag>
