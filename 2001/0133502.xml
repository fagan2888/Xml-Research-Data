<?xml version="1.0" encoding="UTF-8"?>

<rootTag>
  <Award>
    <AwardTitle>CAREER: DELPHIN: Functional Programming in Logical Frameworks</AwardTitle>
    <AwardEffectiveDate>02/01/2002</AwardEffectiveDate>
    <AwardExpirationDate>01/31/2007</AwardExpirationDate>
    <AwardAmount>228772</AwardAmount>
    <AwardInstrument>
      <Value>Continuing grant</Value>
    </AwardInstrument>
    <Organization>
      <Code>05010000</Code>
      <Directorate>
        <LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
      </Directorate>
      <Division>
        <LongName>Division of Computing and Communication Foundations</LongName>
      </Division>
    </Organization>
    <ProgramOfficer>
      <SignBlockName>Sol J. Greenspan</SignBlockName>
    </ProgramOfficer>
    <AbstractNarration>CCR-0133502&lt;br/&gt;CAREER: Delphin: Functional Programming in Logical Frameworks&lt;br/&gt;Carsten Schuermann&lt;br/&gt;&lt;br/&gt;Data structures such as lists, trees, graphs, arrays along with&lt;br/&gt;operations on them are one of the most studied concepts in computer&lt;br/&gt;science and supported by most modern programming languages. Theorems,&lt;br/&gt;proofs, and derivations on the other hand have elegant representations&lt;br/&gt;in expressive logical frameworks but lead in general to complicated,&lt;br/&gt;convoluted, and ultimately unreliable encodings even in modern&lt;br/&gt;programming languages.&lt;br/&gt;&lt;br/&gt;The proposed Delphin project engages in fundamental research on how to&lt;br/&gt;bring together the computational features of programming languages&lt;br/&gt;with the representational features of logical frameworks. In Delphin&lt;br/&gt;programmers can write automated theorem provers, interpreters, and&lt;br/&gt;compilers with elegant and compact data objects representing typing&lt;br/&gt;derivations (for compilers), proofs (for proof carrying code), and&lt;br/&gt;computation traces (for abstract machines). The proposed project&lt;br/&gt;employs techniques from higher-order theories, dependent types,&lt;br/&gt;meta-logical frameworks, and functional programming languages.&lt;br/&gt;&lt;br/&gt;Delphin will shed some light on the epistemological tension between&lt;br/&gt;abstract concepts and their representations; and it will provide&lt;br/&gt;answers concerning their manipulation. Moreover, it will open up new&lt;br/&gt;research areas of how to incorporate logical framework technology into&lt;br/&gt;other mainstream programming languages such as Java and C#.</AbstractNarration>
    <MinAmdLetterDate>01/10/2002</MinAmdLetterDate>
    <MaxAmdLetterDate>08/30/2006</MaxAmdLetterDate>
    <ARRAAmount/>
    <AwardID>0133502</AwardID>
    <Investigator>
      <FirstName>Carsten</FirstName>
      <LastName>Schuermann</LastName>
      <EmailAddress>carsten@cs.yale.edu</EmailAddress>
      <StartDate>01/10/2002</StartDate>
      <EndDate/>
      <RoleCode>Principal Investigator</RoleCode>
    </Investigator>
    <Institution>
      <Name>Yale University</Name>
      <CityName>New Haven</CityName>
      <ZipCode>065208327</ZipCode>
      <PhoneNumber>2037854689</PhoneNumber>
      <StreetAddress>Office of Sponsored Projects</StreetAddress>
      <CountryName>United States</CountryName>
      <StateName>Connecticut</StateName>
      <StateCode>CT</StateCode>
    </Institution>
  </Award>
</rootTag>
